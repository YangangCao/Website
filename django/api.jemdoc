# jemdoc: menu{MENU}{index.html}, nofooter

= -------------------------------------------------
= Basic API

To invoke the python shell:

+$ python manage.py shell+

The difference between python shell and this one is that manage.py sets the DJANGO_SETTINGS_MODULE environment variable, which gives Django the Python import path to your mysite/settings.py file.

~~~
{One Demo}{pyint}
>>> from polls.models import Choice, Question
>>> Question.objects.all()
<QuerySet []>
>>> from django.utils import timezone
>>> q = Question(question_text="What's new?", pub_date=timezone.now())
q.save()
>>> q.id
1
>>> q.pub_date
datetime.datetime(2012, 2, 26, 13, 0, 0, 775217, tzinfo=<UTC>)
>>> q.question_text = "What's up?"
>>> q.save()  # must save the var to take effects on database
>>> Question.objects.all()
<QuerySet [<Question: Question object (1)>]>
~~~

The final return value isn't helpful, let's add \_\_str\_\_() method to class.

~~~
{\_\_str\_\_() revision in poll\/models.py}{pyint}
from django.db import models

class Question(models.Model):
    # ...
    def __str__(self):
        return self.question_text

class Choice(models.Model):
    # ...
    def __str__(self):
        return self.choice_text
~~~

It’s important to add __str__() methods to your models because objects’ representations are used throughout Django’s automatically-generated admin, which generates useless message.

To add some normal method, take time issue as an example(time zone support docs):

~~~
{Add time model in polls\/models.py}{pyint}
import datetime
from django.utils import timezone

class Question(models.Model):
    # ...
    def was_published_recently(self):
        return self.pub_date >= timezone.now() - datetime.timedelta(days=1)
~~~

And now take a another try:

~~~
{Django shell Again}{pyint}
>>> from polls.models import Choice, Question
>>> Question.objects.all()
<QuerySet [<Question: What's up?>]>
>>> Question.objects.filter(id=1)
<QuerySet [<Question: What's up?>]>
>>> Question.objects.filter(question_text__startswith='What')  # note 2 underscore
<QuerySet [<Question: What's up?>]>
>>> from django.utils import timezone
>>> current_year = timezone.now().year
>>> Question.objects.get(pub_date__year=current_year)
<Question: What's up?>
Question.objects.get(id=2)  # get by id, will lead to overflow
DoesNotExist: Question matching query does not exist.
>>> Question.objects.get(pk=1)  # get by primary key
<Question: What's up?>
>>> q = Question.objects.get(pk=1)
>>> q.was_published_recently()
True
>>> q = Question.objects.get(pk=1)
>>> q.choice_set.all()  # choice_set is automatically generated by django
<QuerySet []>
>>> q.choice_set.create(choice_text='Not much', votes=0)
<Choice: Not much>
>>> q.choice_set.create(choice_text='The sky', votes=0)
<Choice: The sky>
>>> c = q.choice_set.create(choice_text='Just hacking again', votes=0)
>>> c.question  # the choice is explicitly linked to question
<Question: What's up?>
>>> q.choice_set.all()
<QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]>
>>> q.choice_set.count()
3
# Use double underscores to separate relationships.
>>> Choice.objects.filter(question__pub_date__year=current_year)
<QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]>
# Let's delete one of the choices. Use delete() for that.
>>> c = q.choice_set.filter(choice_text__startswith='Just hacking')
>>> c.delete()
~~~


== License
Copyright 2015-2018 Baboo J. Cui.
